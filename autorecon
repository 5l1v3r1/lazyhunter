#!/usr/bin/env bash

bold="\e[1m"
red="\e[31m"
cyan="\e[36m"
blue="\e[34m"
reset="\e[0m"
green="\e[32m"
yellow="\e[33m"
underline="\e[4m"
script_filename=${0##*/}

display_banner() {
echo -e ${bold}${blue}"
 ____         ____  _                      _ _     
|  _ \ _ __  / ___|(_) __ _ _ __   ___  __| ( )___ 
| | | | '__| \___ \| |/ _\` | '_ \ / _ \/ _\` |// __|
| |_| | | _   ___) | | (_| | | | |  __/ (_| | \__ \\
|____/|_|(_) |____/|_|\__, |_| |_|\___|\__,_| |___/
                      |___/ ${yellow}Automatic Recon Script${red}
 v1.0.0${blue} ----------------------------------------------
------------------------------------------------------
"${reset}
}

display_usage() {
	display_banner

	while read -r line
	do
		printf "%b\n" "${line}"
	done <<-EOF
	\rUSAGE:
	\r  ${script_filename} [OPTIONS]

	\rGENERAL OPTIONS:
	\r  -d \t\t domain to recon on
	\r  -notify \t send notifications (via notifier)
	\r  -h \t\t display this help message and exit

	\rASSET DISCOVERY OPTIONS:
	\r  -r \t\t resolve
	\r  -hp \t\t http(s) probe
	\r  -ph \t\t ffuf http(s) hosts
	\r  -x \t\t screenshot http(s) hosts
	\r  -use \t\t comma(,) separated subs enum tools to use
	\r  -exclude \t comma(,) separated subs enum tools to exclude

	\rCONTENT DISCOVERY OPTIONS:
	\r  -f \t\t fingerprint hosts
	\r  -c \t\t crawl/spider the hosts

	\rOUTPUT OPTIONS:
	\r  -k \t\t keep each tool's results
	\r  -o \t\t output directory path
	
	\rHAPPY HACKING ! :)

EOF
}

check_tools() {
	tools=(
		# subs enumeration
		amass
		sigsubs
		subfinder
		findomain
		# subs resolution
		massdns
		# http(s) probing
		httpx
		# probe hosts
		ffuf
		# screenshot
		aquatone
		# fingerprint
		wappalyzer
		wafw00f
		# crawl
		sigurls
		sigrawler
		
		# substko
		nuclei

		# sigurlx
		# notification
		notifier
		# misc
		anew
		jq
	)
	missing_tools=()

	for tool in "${tools[@]}"
	do
		[ ! -x "$(command -v ${tool})" ] && {
			missing_tools+=(${tool})
		}
	done

	[ ${#missing_tools[@]} -gt 0 ] && {
		missing_tools_str="${missing_tools[@]}"
		echo -e "\n[-] failed! missing tool(s) : " ${missing_tools_str// /,}"\n"
		exit 1
	}
}

_amass() {
	local amass_output="${asset_discovery_output}/temp-amass-subdomains.txt"

	printf "        [${blue}+${reset}] amass"
	printf "\r"
	amass enum -passive -d ${domain} -o ${amass_output} &> /dev/null
	echo -e "        [${green}*${reset}] amass: $(wc -l < ${amass_output})"
}

_sigsubs() {
	local sigsubs_output="${asset_discovery_output}/temp-sigsubs-subdomains.txt"

	printf "        [${blue}+${reset}] sigsubs"
	printf "\r"
	sigsubs -d ${domain} -silent 1> ${sigsubs_output} 2> /dev/null
	echo -e "        [${green}*${reset}] sigsubs: $(wc -l < ${sigsubs_output})"
}

_findomain() {
	local findomain_output="${asset_discovery_output}/temp-findomain-subdomains.txt"

	printf "        [${blue}+${reset}] findomain"
	printf "\r"
	findomain -t ${domain} -q 1> ${findomain_output} 2> /dev/null
	echo -e "        [${green}*${reset}] findomain: $(wc -l ${findomain_output} | awk '{print $1}' 2> /dev/null)"
}

_subfinder() {
	local subfinder_output="${asset_discovery_output}/temp-subfinder-subdomains.txt"

	printf "        [${blue}+${reset}] subfinder"
	printf "\r"
	subfinder -d ${domain} -silent 1> ${subfinder_output} 2> /dev/null
	echo -e "        [${green}*${reset}] subfinder: $(wc -l < ${subfinder_output})"
}

main() {
	check_tools
	display_banner

	# {{ ASSET DISCOVERY

	echo -e "[${blue}+${reset}] asset discovery"

	[ ! -d ${asset_discovery_output} ] && mkdir -p ${asset_discovery_output}

	ips="${asset_discovery_output}/ips.txt"
	hosts="${asset_discovery_output}/hosts.txt"
	s3_buckets="${asset_discovery_output}/s3.txt"
	subdomains="${asset_discovery_output}/subdomains.txt"
	resolved_subdomains="${asset_discovery_output}/resolved-subdomains.txt"
	hosts_ffuf_output="${asset_discovery_output}/hosts-probe.json"
	visual_reconnaissance="${asset_discovery_output}/visual-reconnaissance"

	# {{ ASSET DISCOVERY: SUNDOMAIN ENUMERATION

	echo -e "    [${blue}+${reset}] subdomains enumeration"

	[ ${subs_sources_to_use} == False ] && [ ${subs_sources_to_exclude} == False ] && {
		for source in "${subs_sources[@]}"
		do 
			_${source}
		done
	} || {
		[ ${subs_sources_to_use} != False ] && {
			for source in "${subs_sources_to_use_dictionary[@]}"
			do 
				_${source}
			done
		} 
		[ ${subs_sources_to_exclude} != False ] && {
			for source in ${subs_sources[@]}
			do
				if [[ " ${subs_sources_to_exclude_dictionary[@]} " =~ " ${source} " ]]
				then
					continue
				else
					_${source}
				fi
			done
		}
	}

	cat ${asset_discovery_output}/temp-*-subdomains.txt | sed 's#*.# #g' | anew -q ${subdomains}
	echo -e "        [=] unique subdomains: $(wc -l < ${subdomains})"

	# }}
	# {{ ASSET DISCOVERY: SUBDOMAINS RESOLUTION

	[ ${resolve} == True ] && [ -f ${subdomains} ] && {
		echo -e "    [${blue}+${reset}] subdomains resolution"

		local massdns_output="${asset_discovery_output}/temp-massdns-resolve.txt"

		printf "        [${blue}+${reset}] resolving"
		printf "\r"
		massdns -r ${HOME}/tools/web/recon/dns-resolution/massdns/lists/resolvers.txt -q -t A -o S -w ${massdns_output} ${subdomains}
		echo -e "        [${blue}+${reset}] resolved!"

		printf "        [${blue}+${reset}] IPs"
		printf "\r"
		cat ${massdns_output} | grep -o -h "[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}" | sort -u | anew -q ${ips}
		echo -e "        [${blue}+${reset}] IPs: $(wc -l < ${ips})"

		printf "        [${blue}+${reset}] s3 buckets"
		printf "\r"
		cat ${massdns_output} | grep -Po "([a-z0-9.-]+\\.s3\\.amazonaws\\.com|[a-z0-9.-]+\\.s3-[a-z0-9-]\\.amazonaws\\.com|[a-z0-9.-]+\\.s3-website[.-](eu|ap|us|ca|sa|cn)|//s3\\.amazonaws\\.com/[a-z0-9._-]+|//s3-[a-z0-9-]+\\.amazonaws\\.com/[a-z0-9._-]+)" | sort -u | anew -q ${s3_buckets}
		echo -e "        [${blue}+${reset}] s3 buckets: $(wc -l < ${s3_buckets})"

		printf "        [${blue}+${reset}] subdomains"
		printf "\r"
		cat ${massdns_output} | grep -Po "^[^-*\"]*?\K[[:alnum:]-]+\.${domain}" | sort -u | anew -q ${resolved_subdomains}
		echo -e "        [${blue}+${reset}] subdomains: $(wc -l < ${resolved_subdomains})"
	}

	# }}
	# {{ ASSET DISCOVERY: HTTP(S) PROBING

	[ ${httprobe} == True ] && [ -f ${resolved_subdomains} ] && {
		echo -e "    [${blue}+${reset}] http(s) probing"

		httpx -l ${resolved_subdomains} -silent | anew -q ${hosts}
	}

	# }}
	# {{ ASSET DISCOVERY: HOSTS PROBING

	[ ${hostsprobe} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] ffuf http(s) hosts"

		ffuf -w ${hosts} -u FUZZ -mc all -o ${hosts_ffuf_output} -of json &> /dev/null
	}

	# }}
	# {{ ASSET DISCOVERY: VISUAL RECONNAISSANCE

	[ ${screenshot} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] visual reconnaissance"

		[ ! -d ${visual_reconnaissance} ] && mkdir -p ${visual_reconnaissance}

		cat ${hosts} | aquatone --ports xlarge -out ${visual_reconnaissance} -scan-timeout 500 -screenshot-timeout 50000 -http-timeout 6000 -silent &> /dev/null
	}

	# }}
	
	[ ${keep} == False ] && rm ${asset_discovery_output}/temp-*-*.txt

	# }}
	# {{ CONTENT DISCOVERY

	echo -e "[${blue}+${reset}] content discovery"

	[ ! -d ${content_discovery_output} ] && mkdir -p ${content_discovery_output}

	urls="${content_discovery_output}/urls.txt"
	sigrawler_output="${content_discovery_output}/sigrawler.json"

	# {{ CONTENT DISCOVERY: FINGERPRINT

	[ ${fingerprint} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] fingerprint"
		fingerprinting_output="${content_discovery_output}/technology"

		[ ! -d ${fingerprinting_output} ] && mkdir -p ${fingerprinting_output}

		printf "        [${blue}+${reset}] wafw00f"
		printf "\r"
		waf_fingerprinting_output="${fingerprinting_output}/waf.json"
		wafw00f -i ${hosts} -o ${waf_fingerprinting_output} &> /dev/null
		echo -e "        [${green}*${reset}] wafw00f"

		# echo -e "        [${blue}+${reset}] web application technology"
		# web_fingerprinting_output="${fingerprinting_output}/web-technology"
		# [ ! -d ${web_fingerprinting_output} ] && mkdir -p ${web_fingerprinting_output}
		# cat ${hosts} | rush 'wappalyzer {} -P > {output_dir}/$(echo {} | urlbits format %s.%S.%r.%t).json' -j 5 -v output_dir=${web_fingerprinting_output}
	}
	
	# }}
	# {{ CONTENT DISCOVERY: CRAWL
	
	[ ${crawl} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] crawl"

		printf "        [${blue}+${reset}] sigurls"
		printf "\r"
		sigurls -d ${domain} -iS -silent 1> ${urls} 2> /dev/null
		echo -e "        [${green}*${reset}] sigurls"

		printf "        [${blue}+${reset}] sigrawler"
		printf "\r"
		[ -f ${hosts} ] && {
			cat ${hosts} ${urls} | sigrawler -iL - -iS -depth 3 -oJ ${sigrawler_output} &> /dev/null
		} || {
			cat ${urls} | sigrawler -iL - -iS -depth 3 -oJ ${sigrawler_output} &> /dev/null
		}
		echo -e "        [${green}*${reset}] sigrawler"

		jq -r '.s3[]?' ${sigrawler_output} | anew -q ${s3_buckets}
		jq -r '.urls[]?' ${sigrawler_output} | anew -q ${urls}
	}

	# }}

	# }}

	echo -e ${bold}${blue}"\n- DONE! ----------------------------------------------"${reset}
}

# START RUNNING SCRIPT

domain=False

resolve=False
httprobe=False
hostsprobe=False
screenshot=False

fingerprint=False
crawl=False

keep=False
notify=False

subs_sources=(
	amass
	sigsubs
	findomain
	subfinder
)
subs_sources_to_use=False
subs_sources_to_exclude=False

asset_discovery_output="$(pwd)/asset-discovery"
content_discovery_output="$(pwd)/content-discovery"

while [[ "${#}" -gt 0 && ."${1}" == .-* ]]
do
	case "$(echo ${1} | tr '[:upper:]' '[:lower:]')" in
		# GENERAL OPTIONS
		-d)
			domain=${2}
			shift
		;;
		-notify)
			notify=True
		;;
		-h)
			display_usage
			exit 0
		;;
		# ASSET DISCOVERY OPTIONS
		-r)
			resolve=True
		;;
		-hp)
			httprobe=True
		;;
		-ph)
			hostsprobe=True
		;;
		-x)
			screenshot=True
		;;
		-use)
			subs_sources_to_use=${2}
			subs_sources_to_use_dictionary=${subs_sources_to_use//,/ }

			for i in ${subs_sources_to_use_dictionary}
			do
				if [[ ! " ${subs_sources[@]} " =~ " ${i} " ]]
				then
					echo -e "[-] Unknown Task: ${i}"
					exit 1
				fi
			done
			shift
		;;
		-exclude)
			subs_sources_to_exclude=${2}
			subs_sources_to_exclude_dictionary=${subs_sources_to_exclude//,/ }

			for i in ${subs_sources_to_exclude_dictionary}
			do
				if [[ ! " ${subs_sources[@]} " =~ " ${i} " ]]
				then
					echo -e "[-] Unknown Task: ${i}"
					exit 1
				fi
			done
			shift
		;;
		# CONTENT DISCOVERY OPTIONS
		-f)
			fingerprint=True
		;;
		-c)
			crawl=True
		;;
		# OUTPUT OPTIONS
		-o)
			asset_discovery_output="${2}/asset-discovery"
			content_discovery_output="${2}/content-discovery"
			shift
		;;
		-k)
			keep=True
		;;
		*)
			display_usage
			exit 1
		;;
	esac
	shift
done

main

exit 0