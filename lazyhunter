#!/usr/bin/env bash

bold="\e[1m"
red="\e[31m"
cyan="\e[36m"
blue="\e[34m"
reset="\e[0m"
green="\e[32m"
yellow="\e[33m"
underline="\e[4m"
script_filename=${0##*/}

display_banner() {
echo -e ${bold}${blue}"
 ____         ____  _                      _ _     
|  _ \ _ __  / ___|(_) __ _ _ __   ___  __| ( )___ 
| | | | '__| \___ \| |/ _\` | '_ \ / _ \/ _\` |// __|
| |_| | | _   ___) | | (_| | | | |  __/ (_| | \__ \\
|____/|_|(_) |____/|_|\__, |_| |_|\___|\__,_| |___/
                      |___/ ${yellow}Lazy Hunter Script${red}
 v1.0.0${blue} ----------------------------------------------
------------------------------------------------------
"${reset}
}

display_usage() {
	display_banner

	while read -r line
	do
		printf "%b\n" "${line}"
	done <<-EOF
	\rUSAGE:
	\r  ${script_filename} [OPTIONS]

	\rGENERAL OPTIONS:
	\r  -d \t\t domain to recon on
	\r  -notify \t send notifications (via notifier)
	\r  -h \t\t display this help message and exit

	\rASSET DISCOVERY OPTIONS:
	\r  -sE \t\t enumerate subdomains
	\r  -sR \t\t resolve subdomain
	\r  -hP \t\t http(s) probe
	\r  -x \t\t screenshot
	\r  -pH \t\t probe hosts
	\r  -use \t\t comma(,) separated subs enum tools to use
	\r  -exclude \t comma(,) separated subs enum tools to exclude

	\rCONTENT DISCOVERY OPTIONS:
	\r  -f \t\t fingerprint hosts
	\r  -c \t\t crawl/spider the hosts
	\r  -pU \t\t probe urls

	\rVULNERABILITY SCAN OPTIONS:
	\r  -vS \t\t run vuln scanning

	\rOUTPUT OPTIONS:
	\r  -k \t\t keep each tool's results
	\r  -o \t\t output directory path
	
	\rHAPPY HACKING ! :)

EOF
}

ensure_tools_are_setup() {
	tools=(
		jq
		anew
		notifier
		# subs enumeration
		amass
		sigsubs
		subfinder
		findomain
		# subs resolution
		massdns
		# http(s) probing
		httpx
		# probe hosts & urls
		sigurlx
		# screenshot
		aquatone
		# fingerprint
		wappalyzer
		wafw00f
		# crawl
		sigurls
		sigrawler
		# subdomain takeover
		substko
		# known vulnerabilities
		nuclei
		# bypass 403
		bypass403
	)
	missing_tools=()

	for tool in "${tools[@]}"
	do
		[ ! -x "$(command -v ${tool})" ] && {
			missing_tools+=(${tool})
		}
	done

	[ ${#missing_tools[@]} -gt 0 ] && {
		missing_tools_str="${missing_tools[@]}"
		echo -e "\n[${red}-${reset}] failed! missing tool(s) : " ${missing_tools_str// /,}
		echo -e "[${yellow}!${reset}] tools not installed or missing in PATH.\n"
		exit 1
	}
}

_amass() {
	local amass_output="${asset_discovery_output}/temp-amass-subdomains.txt"

	printf "        [${blue}+${reset}] amass"
	printf "\r"
	amass enum -passive -d ${domain} -o ${amass_output} &> /dev/null
	echo -e "        [${green}*${reset}] amass: $(wc -l < ${amass_output})"
}

_sigsubs() {
	local sigsubs_output="${asset_discovery_output}/temp-sigsubs-subdomains.txt"

	printf "        [${blue}+${reset}] sigsubs"
	printf "\r"
	sigsubs -d ${domain} -silent 1> ${sigsubs_output} 2> /dev/null
	echo -e "        [${green}*${reset}] sigsubs: $(wc -l < ${sigsubs_output})"
}

_findomain() {
	local findomain_output="${asset_discovery_output}/temp-findomain-subdomains.txt"

	printf "        [${blue}+${reset}] findomain"
	printf "\r"
	findomain -t ${domain} -q 1> ${findomain_output} 2> /dev/null
	echo -e "        [${green}*${reset}] findomain: $(wc -l ${findomain_output} | awk '{print $1}' 2> /dev/null)"
}

_subfinder() {
	local subfinder_output="${asset_discovery_output}/temp-subfinder-subdomains.txt"

	printf "        [${blue}+${reset}] subfinder"
	printf "\r"
	subfinder -d ${domain} -silent 1> ${subfinder_output} 2> /dev/null
	echo -e "        [${green}*${reset}] subfinder: $(wc -l < ${subfinder_output})"
}

main() {
	display_banner
	ensure_tools_are_setup

	# {{ ASSET DISCOVERY

	echo -e "[${blue}+${reset}] asset discovery"

	[ ! -d ${asset_discovery_output} ] && mkdir -p ${asset_discovery_output}

	subdomains="${asset_discovery_output}/subdomains.txt"
	resolved_subdomains="${asset_discovery_output}/resolved-subdomains.txt"
	IP_addresses="${asset_discovery_output}/ips.txt"
	s3_buckets="${asset_discovery_output}/s3.txt"
	hosts="${asset_discovery_output}/hosts.txt"
	hosts_probe="${asset_discovery_output}/hosts-probe.json"
	visual_reconnaissance="${asset_discovery_output}/visual-reconnaissance"

	# {{ ASSET DISCOVERY: SUNDOMAIN ENUMERATION

	[ ${subdomain_enumeration} == True ] && {
		echo -e "    [${blue}+${reset}] subdomain enumeration"

		[ ${subs_sources_to_use} == False ] && [ ${subs_sources_to_exclude} == False ] && {
			for source in "${subs_sources[@]}"
			do 
				_${source}
			done
		} || {
			[ ${subs_sources_to_use} != False ] && {
				for source in "${subs_sources_to_use_dictionary[@]}"
				do 
					_${source}
				done
			} 
			[ ${subs_sources_to_exclude} != False ] && {
				for source in ${subs_sources[@]}
				do
					if [[ " ${subs_sources_to_exclude_dictionary[@]} " =~ " ${source} " ]]
					then
						continue
					else
						_${source}
					fi
				done
			}
		}

		cat ${asset_discovery_output}/temp-*-subdomains.txt | sed 's#*.# #g' | anew -q ${subdomains}
		echo -e "        [=] unique subdomains: $(wc -l < ${subdomains})"

		[ ${keep} == False ] && rm ${asset_discovery_output}/temp-*-subdomains.txt
	}

	# }}
	# {{ TESTING: SUBDOMAIN TAKEOVER

	[ ${vuln_scan} == True ] && [ -f ${subdomains} ] && {
		echo -e "    [${blue}+${reset}] subdomain takeover"
		local substko_output="${testing_output}/subdomain-takeover.txt"

		substko -l ${subdomains} -silent > ${substko_output} 
	}
	
	# }}
	# {{ ASSET DISCOVERY: SUBDOMAINS RESOLUTION

	[ ${subdomain_resolution} == True ] && [ -f ${subdomains} ] && {
		echo -e "    [${blue}+${reset}] subdomain resolution"

		local massdns_output="${asset_discovery_output}/temp-massdns-resolve.txt"

		massdns -r ${HOME}/tools/web/recon/dns-resolution/massdns/lists/resolvers.txt -q -t A -o S -w ${massdns_output} ${subdomains}

		echo -e "        [${blue}+${reset}] extact:"

		cat ${massdns_output} | grep -Po "[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}" | sort -u | anew -q ${IP_addresses}
		echo -e "            [${blue}+${reset}] IPs: $(wc -l < ${IP_addresses})"

		cat ${massdns_output} | grep -Po "([a-z0-9.-]+\\.s3\\.amazonaws\\.com|[a-z0-9.-]+\\.s3-[a-z0-9-]\\.amazonaws\\.com|[a-z0-9.-]+\\.s3-website[.-](eu|ap|us|ca|sa|cn)|//s3\\.amazonaws\\.com/[a-z0-9._-]+|//s3-[a-z0-9-]+\\.amazonaws\\.com/[a-z0-9._-]+)" | sort -u | anew -q ${s3_buckets}
		echo -e "            [${blue}+${reset}] s3 buckets: $(wc -l < ${s3_buckets})"

		cat ${massdns_output} | grep -Po "^[^-*\"]*?\K[[:alnum:]-]+\.${domain}" | sort -u | anew -q ${resolved_subdomains}
		echo -e "            [${blue}+${reset}] subdomains: $(wc -l < ${resolved_subdomains})"

		[ ${keep} == False ] && rm ${asset_discovery_output}/temp-*-resolve.txt
	}

	# }}
	# {{ ASSET DISCOVERY: HTTP(S) PROBING

	[ ${http_s_probing} == True ] && [ -f ${resolved_subdomains} ] && {
		echo -e "    [${blue}+${reset}] http(s) probing"

		httpx -l ${resolved_subdomains} -silent | anew -q ${hosts}
	}

	# }}
	# {{ TESTING: KNOWN VULNERABILITIES

	[ ${vuln_scan} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] known vulns (nuclei)"
		local nuclei_output="${testing_output}/nuclei-output.txt"

		nuclei -l ${hosts}\
			-t ~/nuclei-templates/dns \
			-t ~/nuclei-templates/misc \
			-t ~/nuclei-templates/cves \
			-t ~/nuclei-templates/files \
			-t ~/nuclei-templates/vulnerabilities \
			-t ~/nuclei-templates/security-misconfiguration \
			-severity low,medium,high,critical -silent | tee ${nuclei_output} &> /dev/null
		
	}

	# }}
	# {{ ASSET DISCOVERY: HOSTS PROBE

	[ ${hosts_probing} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] probe hosts"

		sigurlx -iL ${hosts} -r -oJ ${hosts_probe} &> /dev/null
	}

	# }}
	# {{ TESTING: 403 BYPASS

	[ ${vuln_scan} == True ] && [ -f ${hosts_probe} ] && [ $(jq -r '.[] | select(.status_code == 403) | .url' ${hosts_probe} | wc -l) > 0 ] && {
		
		echo -e "    [${blue}+${reset}] 403 bypassing"
		local bypass403_output="${testing_output}/403-bypass.txt"

		jq -r '.[] | select(.status_code == 403) | .url' ${hosts_probe} | bypass403 -iL - > ${bypass403_output}
	}
	
	# }}
	# {{ ASSET DISCOVERY: SCREENSHOT

	[ ${screenshot} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] screenshot"

		[ ! -d ${visual_reconnaissance} ] && mkdir -p ${visual_reconnaissance}

		cat ${hosts} | aquatone --ports xlarge -out ${visual_reconnaissance} -scan-timeout 500 -screenshot-timeout 50000 -http-timeout 6000 -silent &> /dev/null
	}

	# }}

	# }}
	# {{ CONTENT DISCOVERY

	echo -e "[${blue}+${reset}] content discovery"

	[ ! -d ${content_discovery_output} ] && mkdir -p ${content_discovery_output}

	urls="${content_discovery_output}/urls.txt"
	urls_categories="${content_discovery_output}/urls-categories.json"
	endpoints_probe="${content_discovery_output}/endpoints-probe.json"

	# {{ CONTENT DISCOVERY: FINGERPRINT

	[ ${fingerprint} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] fingerprinting"
		fingerprinting_output="${content_discovery_output}/technology"

		[ ! -d ${fingerprinting_output} ] && mkdir -p ${fingerprinting_output}

		printf "        [${blue}+${reset}] wafw00f"
		printf "\r"
		waf_fingerprinting_output="${fingerprinting_output}/waf.json"
		wafw00f -i ${hosts} -o ${waf_fingerprinting_output} &> /dev/null
		echo -e "        [${green}*${reset}] wafw00f"

		# echo -e "        [${blue}+${reset}] web application technology"
		# web_fingerprinting_output="${fingerprinting_output}/web-technology"
		# [ ! -d ${web_fingerprinting_output} ] && mkdir -p ${web_fingerprinting_output}
		# cat ${hosts} | rush 'wappalyzer {} -P > {output_dir}/$(echo {} | urlbits format %s.%S.%r.%t).json' -j 5 -v output_dir=${web_fingerprinting_output}
	}
	
	# }}
	# {{ CONTENT DISCOVERY: CRAWL
	
	[ ${crawl} == True ] && [ -f ${hosts} ] && {
		echo -e "    [${blue}+${reset}] crawl"

		printf "        [${blue}+${reset}] sigurls"
		printf "\r"
		sigurls -d ${domain} -iS -silent 1> ${urls} 2> /dev/null
		echo -e "        [${green}*${reset}] sigurls"

		local sigrawler_output="${content_discovery_output}/temp-sigrawler-crawl.json"

		echo -e "        [${blue}+${reset}] sigrawler"
		[ -f ${hosts} ] && {
			cat ${hosts} ${urls} | sigrawler -iL - -iS -depth 3 -oJ ${sigrawler_output} &> /dev/null
		} || {
			cat ${urls} | sigrawler -iL - -iS -depth 3 -oJ ${sigrawler_output} &> /dev/null
		}

		echo -e "            [${green}+${reset}] extract:"

		jq -r '.s3[]?' ${sigrawler_output} | anew -q ${s3_buckets}
		echo -e "                [${green}+${reset}] s3: $(jq -r '.s3[]?' ${sigrawler_output} | sort -u | wc -l)"

		jq -r '.urls[]?' ${sigrawler_output} | anew -q ${urls}
		echo -e "                [${green}+${reset}] urls: $(jq -r '.urls[]?' ${sigrawler_output} | sort -u | wc -l)"

		[ ${keep} == False ] && rm ${content_discovery_output}/temp-*-crawl.json
	}

	# }}
	# {{ CONTENT DISCOVERY: PROBE URLS

	[ ${urls_probing} == True ] && [ -f ${urls} ] && {
		echo -e "    [${blue}+${reset}] probe urls"

		printf "        [${blue}+${reset}] categorize urls"
		printf "\r"
		sigurlx -iL ${urls} -c -oJ ${urls_categories} &> /dev/null
		echo -e "        [${green}*${reset}] categorize urls"

		printf "        [${blue}+${reset}] probe endpoints"
		printf "\r"
		jq -r '.[] | select(.category == "endpoint") | .url' ${urls_categories} | sigurlx -iL - -pV -pR -dX -r -oJ ${endpoints_probe} &> /dev/null
		echo -e "        [${green}*${reset}] probe endpoints"
	}
	
	# }}

	# }}

	echo -e ${bold}${blue}"\n- DONE! ----------------------------------------------"${reset}
}

# START RUNNING SCRIPT

subdomain_enumeration=False
subdomain_resolution=False
http_s_probing=False
hosts_probing=False
screenshot=False

domain=False

fingerprint=False
crawl=False
urls_probing=False

vuln_scan=False

keep=False
notify=False

subs_sources=(
	amass
	sigsubs
	findomain
	subfinder
)
subs_sources_to_use=False
subs_sources_to_exclude=False

asset_discovery_output="$(pwd)/asset-discovery"
content_discovery_output="$(pwd)/content-discovery"
testing_output="$(pwd)/testing"

while [[ "${#}" -gt 0 && ."${1}" == .-* ]]
do
	case ${1} in
		# GENERAL OPTIONS
		-d)
			domain=${2}
			shift
		;;
		-notify)
			notify=True
		;;
		-h)
			display_usage
			exit 0
		;;
		# ASSET DISCOVERY OPTIONS
		-sE)
			subdomain_enumeration=True
		;;
		-sR)
			subdomain_resolution=True
		;;
		-hP)
			http_s_probing=True
		;;
		-x)
			screenshot=True
		;;
		-pH)
			hosts_probing=True
		;;
		-use)
			subs_sources_to_use=${2}
			subs_sources_to_use_dictionary=${subs_sources_to_use//,/ }

			for i in ${subs_sources_to_use_dictionary}
			do
				if [[ ! " ${subs_sources[@]} " =~ " ${i} " ]]
				then
					echo -e "[-] Unknown Task: ${i}"
					exit 1
				fi
			done
			shift
		;;
		-exclude)
			subs_sources_to_exclude=${2}
			subs_sources_to_exclude_dictionary=${subs_sources_to_exclude//,/ }

			for i in ${subs_sources_to_exclude_dictionary}
			do
				if [[ ! " ${subs_sources[@]} " =~ " ${i} " ]]
				then
					echo -e "[-] Unknown Task: ${i}"
					exit 1
				fi
			done
			shift
		;;
		# CONTENT DISCOVERY OPTIONS
		-f)
			fingerprint=True
		;;
		-c)
			crawl=True
		;;
		-pU)
			urls_probing=True
		;;
		# VULNERABILITY SCAN OPTIONS
		-vS)
			vuln_scan=True
		;;
		# OUTPUT OPTIONS
		-o)
			asset_discovery_output="${2}/asset-discovery"
			content_discovery_output="${2}/content-discovery"
			testing_output="${2}/testing"
			shift
		;;
		-k)
			keep=True
		;;
		*)
			display_usage
			exit 1
		;;
	esac
	shift
done

main

exit 0