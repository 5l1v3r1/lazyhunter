#!/usr/bin/env bash

bold="\e[1m"
red="\e[31m"
cyan="\e[36m"
blue="\e[34m"
reset="\e[0m"
green="\e[32m"
yellow="\e[33m"
underline="\e[4m"
script_filename=${0##*/}
script_location="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

display_banner() {
echo -e ${bold}${blue}"
 ____         ____  _                      _ _     
|  _ \ _ __  / ___|(_) __ _ _ __   ___  __| ( )___ 
| | | | '__| \___ \| |/ _\` | '_ \ / _ \/ _\` |// __|
| |_| | | _   ___) | | (_| | | | |  __/ (_| | \__ \\
|____/|_|(_) |____/|_|\__, |_| |_|\___|\__,_| |___/
                      |___/ ${yellow}Lazy Hunter Script${red}
 v1.0.0${blue} ----------------------------------------------
------------------------------------------------------
"${reset}
}

display_usage() {
	display_banner

	while read -r line
	do
		printf "%b\n" "${line}"
	done <<-EOF
	\rUSAGE:
	\r  ${script_filename} [OPTIONS]

	\rGENERAL OPTIONS:
	\r  -d \t\t domain to recon on
	\r  -iS \t\t include subdomains
	\r  -notify \t send notifications (via notifier)
	\r  -h \t\t display this help message and exit

	\rASSET DISCOVERY OPTIONS:
	\r  -sE \t\t enumerate subdomains
	\r  -sR \t\t resolve subdomain
	\r  -hP \t\t http(s) probe
	\r  -x \t\t screenshot
	\r  -pH \t\t probe hosts
	\r  -use \t\t comma(,) separated subs enum tools to use
	\r  -exclude \t comma(,) separated subs enum tools to exclude

	\rCONTENT DISCOVERY OPTIONS:
	\r  -f \t\t fingerprint hosts
	\r  -c \t\t crawl/spider the hosts
	\r  -pU \t\t probe urls

	\rVULNERABILITY SCAN OPTIONS:
	\r  -vS \t\t run vuln scanning

	\rOUTPUT OPTIONS:
	\r  -k \t\t keep each tool's results
	\r  -o \t\t output directory path
	
	\rHAPPY HACKING ! :)

EOF
}

ensure_tools_are_setup() {
	tools=(
		jq
		anew
		notifier
		# subs enumeration
		amass
		sigsubs
		subfinder
		findomain
		# subs resolution
		massdns
		# http(s) probing
		httpx
		# probe hosts & urls
		sigurlx
		# screenshot
		aquatone
		# fingerprint
		wappalyzer
		wafw00f
		# crawl
		sigurls
		sigrawler
		# subdomain takeover
		substko
		# known vulnerabilities
		nuclei
		# bypass 403
		bypass403
	)
	missing_tools=()

	for tool in "${tools[@]}"
	do
		[ ! -x "$(command -v ${tool})" ] && {
			missing_tools+=(${tool})
		}
	done

	[ ${#missing_tools[@]} -gt 0 ] && {
		missing_tools_str="${missing_tools[@]}"
		echo -e "\n[${red}-${reset}] failed! missing tool(s) : " ${missing_tools_str// /,}
		echo -e "[${yellow}!${reset}] tools not installed or missing in PATH.\n"
		exit 1
	}
}

main() {
	display_banner
	ensure_tools_are_setup

	# {{ MAKE OUTPUT FOLDERS

	[ ${subdomain_enumeration} == True ] || [ ${subdomain_resolution} == True ] || [ ${http_s_probing} == True ] || [ ${screenshot} == True ] || [ ${hosts_probing} == True ] && {
		[ ! -d ${asset_discovery_output} ] && mkdir -p ${asset_discovery_output}
	}

	[ ${fingerprint} == True ] || [ ${crawl} == True ] || [ ${urls_probing} == True ] && {
		[ ! -d ${asset_discovery_output} ] && mkdir -p ${asset_discovery_output}
	}

	[ ${vuln_scan} == True ]  && {
		[ ! -d ${asset_discovery_output} ] && mkdir -p ${asset_discovery_output}
	}

	# }}

	urls="${content_discovery_output}/urls.txt"
	hosts="${asset_discovery_output}/hosts.txt"
	s3_buckets="${asset_discovery_output}/s3.txt"
	IP_addresses="${asset_discovery_output}/ips.txt"
	subdomains="${asset_discovery_output}/subdomains.txt"
	hosts_probe="${asset_discovery_output}/hosts-probe.json"
	urls_categories="${content_discovery_output}/urls-categories.json"
	endpoints_probe="${content_discovery_output}/endpoints-probe.json"
	resolved_subdomains="${asset_discovery_output}/resolved-subdomains.txt"
	visual_reconnaissance="${asset_discovery_output}/visual-reconnaissance"
	
	source ${script_location}/_/asset_discovery
	source ${script_location}/_/content_discovery

	# }}

	echo -e ${bold}${blue}"\n- DONE! ----------------------------------------------"${reset}
}

# START RUNNING SCRIPT

domain=False
include_subdomains=False

subdomain_enumeration=False
subdomain_resolution=False
http_s_probing=False
hosts_probing=False
screenshot=False

fingerprint=False
crawl=False
urls_probing=False

vuln_scan=False

keep=False
notify=False

subs_sources=(
	amass
	sigsubs
	findomain
	subfinder
)
subs_sources_to_use=False
subs_sources_to_exclude=False

asset_discovery_output="$(pwd)/asset-discovery"
content_discovery_output="$(pwd)/content-discovery"
testing_output="$(pwd)/testing"

while [[ "${#}" -gt 0 && ."${1}" == .-* ]]
do
	case ${1} in
		# GENERAL OPTIONS
		-d)
			domain=${2}
			shift
		;;
		-iS)
			include_subdomains=True
		;;
		-notify)
			notify=True
		;;
		-h)
			display_usage
			exit 0
		;;
		# ASSET DISCOVERY OPTIONS
		-sE)
			subdomain_enumeration=True
		;;
		-sR)
			subdomain_resolution=True
		;;
		-hP)
			http_s_probing=True
		;;
		-x)
			screenshot=True
		;;
		-pH)
			hosts_probing=True
		;;
		-use)
			subs_sources_to_use=${2}
			subs_sources_to_use_dictionary=${subs_sources_to_use//,/ }

			for i in ${subs_sources_to_use_dictionary}
			do
				if [[ ! " ${subs_sources[@]} " =~ " ${i} " ]]
				then
					echo -e "[-] Unknown Task: ${i}"
					exit 1
				fi
			done
			shift
		;;
		-exclude)
			subs_sources_to_exclude=${2}
			subs_sources_to_exclude_dictionary=${subs_sources_to_exclude//,/ }

			for i in ${subs_sources_to_exclude_dictionary}
			do
				if [[ ! " ${subs_sources[@]} " =~ " ${i} " ]]
				then
					echo -e "[-] Unknown Task: ${i}"
					exit 1
				fi
			done
			shift
		;;
		# CONTENT DISCOVERY OPTIONS
		-f)
			fingerprint=True
		;;
		-c)
			crawl=True
		;;
		-pU)
			urls_probing=True
		;;
		# VULNERABILITY SCAN OPTIONS
		-vS)
			vuln_scan=True
		;;
		# OUTPUT OPTIONS
		-o)
			asset_discovery_output="${2}/asset-discovery"
			content_discovery_output="${2}/content-discovery"
			testing_output="${2}/testing"
			shift
		;;
		-k)
			keep=True
		;;
		*)
			display_usage
			exit 1
		;;
	esac
	shift
done

main

exit 0