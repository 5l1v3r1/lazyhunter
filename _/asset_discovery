# {{ SUBDOMAIN ENUMERATION TOOLS AVAILABLE

_amass() {
	local amass_output="${asset_discovery_output}/temp-amass-subdomains.txt"

	printf "        [${blue}+${reset}] amass"
	printf "\r"
	amass enum -passive -d ${domain} -o ${amass_output} &> /dev/null
	echo -e "        [${green}*${reset}] amass: $(wc -l < ${amass_output})"
}

_sigsubs() {
	local sigsubs_output="${asset_discovery_output}/temp-sigsubs-subdomains.txt"

	printf "        [${blue}+${reset}] sigsubs"
	printf "\r"
	sigsubs -d ${domain} -silent 1> ${sigsubs_output} 2> /dev/null
	echo -e "        [${green}*${reset}] sigsubs: $(wc -l < ${sigsubs_output})"
}

_findomain() {
	local findomain_output="${asset_discovery_output}/temp-findomain-subdomains.txt"

	printf "        [${blue}+${reset}] findomain"
	printf "\r"
	findomain -t ${domain} -q 1> ${findomain_output} 2> /dev/null
	echo -e "        [${green}*${reset}] findomain: $(wc -l ${findomain_output} | awk '{print $1}' 2> /dev/null)"
}

_subfinder() {
	local subfinder_output="${asset_discovery_output}/temp-subfinder-subdomains.txt"

	printf "        [${blue}+${reset}] subfinder"
	printf "\r"
	subfinder -d ${domain} -silent 1> ${subfinder_output} 2> /dev/null
	echo -e "        [${green}*${reset}] subfinder: $(wc -l < ${subfinder_output})"
}

# }}
# {{ ASSET DISCOVERY WORKFLOW

echo -e "[${blue}+${reset}] asset discovery"

# {{ ASSET DISCOVERY WORKFLOW: SUNDOMAIN ENUMERATION

[ ${subdomain_enumeration} == True ] && [ ${domain} != False ] && {
    echo -e "    [${blue}+${reset}] subdomain enumeration"

    [ ${include_subdomains} == True ] && {
        [ ${subs_sources_to_use} == False ] && [ ${subs_sources_to_exclude} == False ] && {
            for source in "${subs_sources[@]}"
            do 
                _${source}
            done
        } || {
            [ ${subs_sources_to_use} != False ] && {
                for source in "${subs_sources_to_use_dictionary[@]}"
                do 
                    _${source}
                done
            } 
            [ ${subs_sources_to_exclude} != False ] && {
                for source in ${subs_sources[@]}
                do
                    if [[ " ${subs_sources_to_exclude_dictionary[@]} " =~ " ${source} " ]]
                    then
                        continue
                    else
                        _${source}
                    fi
                done
            }
        }
    } || {
        echo "${domain}" > ${asset_discovery_output}/temp-input-subdomains.txt
    }

    cat ${asset_discovery_output}/temp-*-subdomains.txt | sed 's#*.# #g' | anew -q ${subdomains}
    echo -e "        [=] unique subdomains: $(wc -l < ${subdomains})"

    [ ${keep} == False ] && rm ${asset_discovery_output}/temp-*-subdomains.txt
}

# }}
# {{ TESTING: SUBDOMAIN TAKEOVER

[ ${vuln_scan} == True ] && [ -f ${subdomains} ] && {
    echo -e "    [${blue}+${reset}] subdomain takeover"
    local substko_output="${testing_output}/subdomain-takeover.txt"

    substko -l ${subdomains} -silent > ${substko_output} 
}

# }}
# {{ ASSET DISCOVERY WORKFLOW: SUBDOMAINS RESOLUTION

[ ${subdomain_resolution} == True ] && [ -f ${subdomains} ] && {
    echo -e "    [${blue}+${reset}] subdomain resolution"

    local massdns_output="${asset_discovery_output}/temp-massdns-resolve.txt"

    massdns -r ${HOME}/tools/web/recon/dns-resolution/massdns/lists/resolvers.txt -q -t A -o S -w ${massdns_output} ${subdomains}

    echo -e "        [${blue}+${reset}] extact:"

    cat ${massdns_output} | grep -Po "[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}" | sort -u | anew -q ${IP_addresses}
    echo -e "            [${blue}+${reset}] IPs: $(wc -l < ${IP_addresses})"

    cat ${massdns_output} | grep -Po "([a-z0-9.-]+\\.s3\\.amazonaws\\.com|[a-z0-9.-]+\\.s3-[a-z0-9-]\\.amazonaws\\.com|[a-z0-9.-]+\\.s3-website[.-](eu|ap|us|ca|sa|cn)|//s3\\.amazonaws\\.com/[a-z0-9._-]+|//s3-[a-z0-9-]+\\.amazonaws\\.com/[a-z0-9._-]+)" | sort -u | anew -q ${s3_buckets}
    echo -e "            [${blue}+${reset}] s3 buckets: $(wc -l < ${s3_buckets})"

    cat ${massdns_output} | grep -Po "^[^-*\"]*?\K[[:alnum:]-]+\.${domain}" | sort -u | anew -q ${resolved_subdomains}
    echo -e "            [${blue}+${reset}] subdomains: $(wc -l < ${resolved_subdomains})"

    [ ${keep} == False ] && rm ${asset_discovery_output}/temp-*-resolve.txt
}

# }}
# {{ ASSET DISCOVERY WORKFLOW: HTTP(S) PROBING

[ ${http_s_probing} == True ] && [ -f ${resolved_subdomains} ] && {
    echo -e "    [${blue}+${reset}] http(s) probing"

    httpx -l ${resolved_subdomains} -silent | anew -q ${hosts}
}

# }}
# {{ TESTING: KNOWN VULNERABILITIES

[ ${vuln_scan} == True ] && [ -f ${hosts} ] && {
    echo -e "    [${blue}+${reset}] known vulns (nuclei)"
    local nuclei_output="${testing_output}/nuclei-output.txt"

    nuclei -l ${hosts}\
        -t ~/nuclei-templates/dns \
        -t ~/nuclei-templates/misc \
        -t ~/nuclei-templates/cves \
        -t ~/nuclei-templates/files \
        -t ~/nuclei-templates/vulnerabilities \
        -t ~/nuclei-templates/security-misconfiguration \
        -severity low,medium,high,critical -silent | tee ${nuclei_output} &> /dev/null
    
}

# }}
# {{ ASSET DISCOVERY WORKFLOW: HOSTS PROBE

[ ${hosts_probing} == True ] && [ -f ${hosts} ] && {
    echo -e "    [${blue}+${reset}] probe hosts"

    sigurlx -iL ${hosts} -r -oJ ${hosts_probe} &> /dev/null
}

# }}
# {{ TESTING: 403 BYPASS

[ ${vuln_scan} == True ] && [ -f ${hosts_probe} ] && [ $(jq -r '.[] | select(.status_code == 403) | .url' ${hosts_probe} | wc -l) > 0 ] && {
    
    echo -e "    [${blue}+${reset}] 403 bypassing"
    local bypass403_output="${testing_output}/403-bypass.txt"

    jq -r '.[] | select(.status_code == 403) | .url' ${hosts_probe} | bypass403 -iL - > ${bypass403_output}
}

# }}
# {{ ASSET DISCOVERY WORKFLOW: SCREENSHOT

[ ${screenshot} == True ] && [ -f ${hosts} ] && {
    echo -e "    [${blue}+${reset}] screenshot"

    [ ! -d ${visual_reconnaissance} ] && mkdir -p ${visual_reconnaissance}

    cat ${hosts} | aquatone --ports xlarge -out ${visual_reconnaissance} -scan-timeout 500 -screenshot-timeout 50000 -http-timeout 6000 -silent &> /dev/null
}

# }}

# }}